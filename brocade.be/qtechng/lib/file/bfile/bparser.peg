{
package bfile

import (

    qutil "brocade.be/qtechng/util"
    qerror "brocade.be/qtechng/error"
    qregistry "brocade.be/base/registry"
)



}


File <- preamble:(Preamble?) brobs:(Brob*) EOF {
	p := qutil.Comment(preamble)
    bs := brobs.([]interface{})
    if len(bs) == 0 {
        return BFile{
		    Preamble: p,
		    Brobs: nil,
	    }, nil
    }
	brbs := make([]*Brob, len(bs))
	for i, b := range bs {
        brbs[i] = b.(*Brob)
	}

    return BFile{
		Preamble: p,
		Brobs: brbs,
	}, nil
}

Preamble <- Comment  {
    value := string(c.text)
    value = strings.TrimSpace(value)
    if strings.HasPrefix(value, "'''") || strings.HasPrefix(value, "\"\"\""){
        value = value[3:]
    }
    if strings.HasSuffix(value, "'''") || strings.HasSuffix(value, "\"\"\""){
        value = value[:len(value)-3]
    }
    if strings.HasSuffix(value, "'''") {
        value = value[:len(value)-3]
    }
    value = strings.TrimSpace(value)

    return value, nil
}


Brob <- head:(Header) body:(Body) &(Type / EOF) {
    x := [3]string(head.([3]string))
    b := Brob{
        ID: x[1],
        Ty: x[0],
        Body: body.([]*Field),
    }
	return &b, nil
}



Header <- ty:Type WSS+ id:(BrobID) WSS* ":"  WS* cmt:(Cmt) {
    return [3]string{ty.(string), id.(string), cmt.(string)}, nil
}

Type <- ("mprocess" / "mailtrg" / "usergroup" / "ujson" / "lookup" / "history" / "meta" / "listattribute" / "listidentity" / "listdownloadtype" / "cg" / "loi" / "search" / "listsorttype" / "nodeattribute" / "listconversion") {
    return string(c.text), nil
}


BrobID <- [?0-9A-Za-z_./%^]+ {
    return string(c.text), nil
}

Cmt <- CmtLine* {
    return string(c.text), nil
}

CmtLine <- "//" [^\n\r]* (EOF / WS+) {
    return string(c.text), nil
}


Body <- fields:Field+ {
    x := fields.([]interface{})
    flds := make([]*Field, len(x))
    for i, f := range x {
        flds[i] = f.(*Field)
    }
    return flds, nil
}

Key <- [a-z][a-z0-9]* {
    return string(c.text), nil
}

Field <- WS* "$" key:Key WSS* ":" WSS* value:( Value1 / Value2 / Value3 ) WS* Cmt?  attribs:Attrib* {
    x := attribs.([]interface{})
    attr := make([]*Duo, len(x))
    for i, a := range x {
        attr[i] = a.(*Duo)
    }
    f := Field {
        key: key.(string),
        value: value.(string),
        attribs: attr,
    }
    return &f, nil
}


Attrib <- WS* "$$" key:Key WSS* ":" WSS* value:(Value1 / Value2 / Value3) WS* Cmt? {
    d := Duo {
        key: key.(string),
        value: value.(string),
    }
    return &d, nil
}



Value1 <- "⟦" [^⟦⟧]* "⟧" {
    return strings.Trim(string(c.text), "⟧⟦"), nil
}


Value2 <- "«" [^«»]* "»" {
    return strings.Trim(string(c.text), "«»"), nil
}

Value3 <- [^\n\r]* (EOL / EOF) {
    x := string(c.text)
    k := strings.Index(x, "//")
    if k == 0 {
        return "", nil
    }
    if k != -1 {
       return strings.TrimSpace(x[:k]), nil
    }
    return strings.TrimSpace(x), nil
}


UntilEnd <- [^\n\r]* (EOL / EOF) {
    return string(c.text), nil
}

NotCommentLine <-  (([^\n\r/]* (EOL / EOF)) / ([^\n\r/]* !"/" NotCommentLine)) {
    return c.text, nil
}

CommentLine <- ("//" [^\n\r]*)

Comment <- comment:(CommentLine / WS+)+ {
	return string(c.text), nil
}

WS <- [ \n\t\r]

WSS <- [ \t]

EOL <- ("\r\n" / "\n\r" / "\r" / "\n")

EOF <- !.


